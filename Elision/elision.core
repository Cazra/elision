<?xml version='1.0' encoding='utf-8'?>
<elision-core msg="Internal error." when="Thu May 24 03:25:12 EDT 2012">
      		<error message="Malformed class name"><item>java.lang.Class.getSimpleName(Class.java:1133)</item><item>java.lang.Class.isAnonymousClass(Class.java:1188)</item><item>scala.tools.nsc.interpreter.RichClass.isScalaAnonymous(RichClass.scala:16)</item><item>scala.tools.nsc.interpreter.TypeStrings$class.scalaName(TypeStrings.scala:47)</item><item>scala.tools.nsc.interpreter.TypeStrings$.scalaName(TypeStrings.scala:114)</item><item>scala.tools.nsc.interpreter.TypeStrings$class.fromManifest(TypeStrings.scala:88)</item><item>scala.tools.nsc.interpreter.TypeStrings$.fromManifest(TypeStrings.scala:114)</item><item>scala.tools.nsc.interpreter.NamedParam$Typed.&lt;init&gt;(NamedParam.scala:27)</item><item>scala.tools.nsc.interpreter.NamedParamCreator$class.apply(NamedParam.scala:15)</item><item>scala.tools.nsc.interpreter.NamedParam$.apply(NamedParam.scala:25)</item><item>scala.tools.nsc.interpreter.NamedParamCreator$class.tuple(NamedParam.scala:22)</item><item>scala.tools.nsc.interpreter.NamedParam$.tuple(NamedParam.scala:25)</item><item>scala.tools.nsc.interpreter.IMain.bind(IMain.scala:627)</item><item>ornl.elision.core.TypedSymbolicOperator$.apply(Operator.scala:387)</item><item>ornl.elision.core.Operator$.apply(Operator.scala:111)</item><item>ornl.elision.core.SpecialForm$.apply(SpecialForm.scala:307)</item><item>ornl.elision.parse.AtomParser$SpecialFormNode.interpret(AtomParser.scala:464)</item><item>ornl.elision.parse.AtomParser$AtomSeqNode$$anonfun$interpret$1.apply(AtomParser.scala:249)</item><item>ornl.elision.parse.AtomParser$AtomSeqNode$$anonfun$interpret$1.apply(AtomParser.scala:249)</item><item>scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:194)</item><item>scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:194)</item><item>scala.collection.Iterator$class.foreach(Iterator.scala:660)</item><item>scala.collection.immutable.VectorIterator.foreach(Vector.scala:621)</item><item>scala.collection.IterableLike$class.foreach(IterableLike.scala:73)</item><item>scala.collection.immutable.Vector.foreach(Vector.scala:36)</item><item>scala.collection.TraversableLike$class.map(TraversableLike.scala:194)</item><item>scala.collection.immutable.Vector.map(Vector.scala:36)</item><item>ornl.elision.parse.AtomParser$AtomSeqNode.interpret(AtomParser.scala:249)</item><item>ornl.elision.parse.AtomParser$AtomSeqNode.interpret(AtomParser.scala:243)</item><item>ornl.elision.parse.AtomParser$ApplicationNode.interpret(AtomParser.scala:216)</item><item>ornl.elision.repl.Repl$$anonfun$execute$1.apply(Repl.scala:465)</item><item>ornl.elision.repl.Repl$$anonfun$execute$1.apply(Repl.scala:463)</item><item>scala.collection.LinearSeqOptimized$class.forall(LinearSeqOptimized.scala:69)</item><item>scala.collection.immutable.List.forall(List.scala:45)</item><item>ornl.elision.repl.Repl$.execute(Repl.scala:463)</item><item>ornl.elision.repl.Repl$.defineOps(Repl.scala:603)</item><item>ornl.elision.repl.Repl$.run(Repl.scala:279)</item><item>ornl.elision.repl.Repl$.main(Repl.scala:169)</item><item>ornl.elision.repl.Repl.main(Repl.scala)</item><item>sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</item><item>sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)</item><item>sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)</item><item>java.lang.reflect.Method.invoke(Method.java:597)</item><item>scala.tools.nsc.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:78)</item><item>scala.tools.nsc.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:24)</item><item>scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:88)</item><item>scala.tools.nsc.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:78)</item><item>scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)</item><item>scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:33)</item><item>scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:40)</item><item>scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:56)</item><item>scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:80)</item><item>scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:89)</item><item>scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)</item></error>
      		<binds>{ binds  }</binds>
      		<operator-library>{: operator:SYMBOL { binds name -&gt; def:SYMBOL description -&gt; &quot;Add the named operator to the context.&quot; evenmeta -&gt; true params -&gt; %($op) detail -&gt; &quot;This will add the operator op to the current context.  This makes\nthe operator available by name, or through an OPREF.\n        &quot; type -&gt; NONE } :}
{: operator:SYMBOL { binds name -&gt; LIST:SYMBOL description -&gt; &quot;List type constructor.&quot; params -&gt; %($type) `(detail,StringLiteral(NamedRootType(&quot;STRING&quot;), &quot;This operator is used to indicate the type of a list.  It\\ntakes a single argument that is the type of the atoms in\\nthe list.  For heterogeneous lists this will be ANY.\\n          &quot;))evenmeta` -&gt; false type -&gt; ANY } :}
{: operator:SYMBOL { binds name -&gt; typeof:SYMBOL description -&gt; &quot;Extract and show the type of the argument.&quot; detail -&gt; &quot;Given a single argument, extract the type $T of that argument $x\nand return the extracted type.&quot; cases -&gt; %((%($x:$T) -&gt; $T)) } :}
{: operator:SYMBOL { binds name -&gt; xx:SYMBOL description -&gt; &quot;Cross product.&quot; params -&gt; %A($x, $y) type -&gt; ANY `(detail,StringLiteral(NamedRootType(&quot;STRING&quot;), &quot;This operator is used to construct types for operators.  It\\nindicates the cross product of two atoms (typically types).\\nThese originate from the types of the parameters of an operator.\\n          &quot;))evenmeta` -&gt; false } :}
{: operator:SYMBOL { binds name -&gt; MAP:SYMBOL `(detail,StringLiteral(NamedRootType(&quot;STRING&quot;), &quot;This operator is used to construct types for operators.  It\\nindicates a mapping from one type (the domain) to another type\\n(the codomain).\\n          &quot;))evenmeta` -&gt; false description -&gt; &quot;Mapping constructor.&quot; params -&gt; %($domain, $codomain) type -&gt; ANY } :}
</operator-library>
      		<rule-library></rule-library>
      		<history>2: !492
3: !493
4: !494
5: !495
6: !496
7: history
8: history()
9: !468
10: !469
11: {match %A($x,$y)}.%(1,2,3)
12: {match %AC($x,$y)}.%(1,2,3)
13: {match %AC!I($x,$y)}.%(1,2,3)
14: {match %AC!D[0]I($x,$y)}.%(1,2,3)
15: {match %AC!ID[0]($x,$y)}.%(1,2,3)
16: {match %AC!ID[0]($x:INTEGER,$y)}.%(1,2,3)
17: {match %AC!ID[0]($x:INTEGER,$y:INTEGER)}.%(1,2,3)
18: tracematch()
19: {match %AC!ID[0]($x:INTEGER,$y:INTEGER)}.%(1,2,3)
20: {match %AC!ID[0]($x:INTEGER,$y:LIST(INTEGER))}.%(1,2,3)
21: history()
22: {match %AC!ID[0]($x:INTEGER,$y:LIST(INTEGER))}.%(1,2,3)
23: { operator #name=gadd
24:   #case
25:   
26: { operator #name=gadd #cases
27:   %() -&gt; _,
28:   %($x:INTEGER) -&gt; $x
29:   ,
30:   %($s: STRING) -&gt; $s,
31:   %AC!ID[0]($x:INTEGER, $y) -&gt; add($x,$y),
32:   %A!C!ID[&quot;&quot;]($s:STRING,$t) -&gt; $s.$t
33: }
34: def(eval($repl18))
35: tracematch()
36: gadd()
37: gadd(1)
38: gadd(&quot;&quot;)
39: gadd(4,5)
40: gadd(4,5,6,7)
41: gadd(4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)
42: time()
43: showtime()
44: help()
45: &quot;&quot;&quot;|This is
46: |a test.&quot;&quot;&quot;
47: // Ended Normally: Thu May 10 12:35:29 EDT 2012
48: // New Session: Thu May 10 12:35:33 EDT 2012
49: // Running: 0.0, build 201205071814
50: help()
51: // Ended Normally: Thu May 10 12:38:57 EDT 2012
52: // New Session: Thu May 10 12:39:03 EDT 2012
53: // Running: 0.0, build 201205071814
54: help()
55: // Ended Normally: Thu May 10 12:39:37 EDT 2012
56: // New Session: Thu May 10 12:39:38 EDT 2012
57: // Running: 0.0, build 201205071814
58: help()
59: // Ended Normally: Thu May 10 12:48:32 EDT 2012
60: // New Session: Thu May 10 12:48:36 EDT 2012
61: // Running: 0.0, build 201205071814
62: // Ended Normally: Thu May 10 12:48:52 EDT 2012
63: // New Session: Thu May 10 12:48:53 EDT 2012
64: // Running: 0.0, build 201205071814
65: help()
66: // Ended Normally: Thu May 10 12:49:39 EDT 2012
67: // New Session: Thu May 10 12:49:40 EDT 2012
68: // Running: 0.0, build 201205071814
69: help()
70: _help_all()
71: help(MAP:OPREF)
72: help(help:OPREF)
73: // Ended Normally: Thu May 10 12:51:37 EDT 2012
74: // New Session: Thu May 10 13:42:21 EDT 2012
75: // Running: 0.0, build 201205071814
76: help()
77: // Ended Normally: Thu May 10 13:43:16 EDT 2012
78: // New Session: Thu May 10 13:43:18 EDT 2012
79: // Running: 0.0, build 201205071814
80: help()
81: // Ended Normally: Thu May 10 13:43:59 EDT 2012
82: // New Session: Thu May 10 13:44:01 EDT 2012
83: // Running: 0.0, build 201205071814
84: help()
85: _help_all()
86: // Ended Normally: Thu May 10 13:47:32 EDT 2012
87: // New Session: Thu May 10 13:47:33 EDT 2012
88: // Running: 0.0, build 201205071814
89: help()
90: help(typeof:OPREF)
91:         def({ operator #name=typeof #cases %($x:$T)-&gt;$T
92:               #description=&quot;Extract and show the type of the argument.&quot;
93:      })
94: // Ended Normally: Thu May 10 13:49:46 EDT 2012
95: // New Session: Thu May 10 13:49:49 EDT 2012
96: // Running: 0.0, build 201205071814
97: typeof:OPREF
98: help()
99: help(typeof:OPREF)
100: // Ended Normally: Thu May 10 13:51:55 EDT 2012
101: // New Session: Thu May 10 13:51:58 EDT 2012
102: // Running: 0.0, build 201205071814
103: help(typeof:OPREF)
104: // Ended Normally: Thu May 10 13:52:16 EDT 2012
105: // New Session: Thu May 10 13:52:17 EDT 2012
106: // Running: 0.0, build 201205071814
107: help(typeof:OPREF)
108: // Ended Normally: Thu May 10 13:53:07 EDT 2012
109: // New Session: Thu May 10 13:53:09 EDT 2012
110: // Running: 0.0, build 201205071814
111: help(typeof:OPREF)
112: // Ended Normally: Thu May 10 13:53:36 EDT 2012
113: // New Session: Thu May 10 13:53:39 EDT 2012
114: // Running: 0.0, build 201205071814
115: help(typeof:OPREF)
116: // Ended Normally: Thu May 10 14:03:11 EDT 2012
117: // New Session: Thu May 10 14:03:14 EDT 2012
118: // Running: 0.0, build 201205071814
119: help(typeof:OPREF)
120: help(help:OPREF)
121: help(MAP:OPREF)
122: // Ended Normally: Thu May 10 14:03:52 EDT 2012
123: // New Session: Thu May 10 14:03:54 EDT 2012
124: // Running: 0.0, build 201205071814
125: help(MAP:OPREF)
126: help(xx:OPREF)
127: help(LIST:OPREF)
128: help(def:OPREF)
129: help()
130: // Ended Normally: Thu May 10 14:14:43 EDT 2012
131: // New Session: Thu May 10 14:14:45 EDT 2012
132: // Running: 0.0, build 201205071814
133: help()
134: // Ended Normally: Thu May 10 14:15:17 EDT 2012
135: // New Session: Thu May 10 14:15:18 EDT 2012
136: // Running: 0.0, build 201205071814
137: help()
138: // Ended Normally: Thu May 10 14:15:51 EDT 2012
139: // New Session: Thu May 10 14:15:53 EDT 2012
140: // Running: 0.0, build 201205071814
141: // Ended Normally: Thu May 10 14:15:57 EDT 2012
142: // New Session: Thu May 10 14:16:55 EDT 2012
143: // Running: 0.0, build 201205071814
144: // Ended Normally: Thu May 10 14:17:09 EDT 2012
145: // New Session: Thu May 10 14:17:11 EDT 2012
146: // Running: 0.0, build 201205071814
147: // Ended Normally: Thu May 10 14:20:48 EDT 2012
148: // New Session: Thu May 10 14:20:51 EDT 2012
149: // Running: 0.0, build 201205071814
150: help()
151: help(typeof:OPREF)
152: help(getop:OPREF)
153: help(getop)
154: help(help:OPREF)
155: // Ended Normally: Thu May 10 14:30:48 EDT 2012
156: // New Session: Thu May 10 14:30:51 EDT 2012
157: // Running: 0.0, build 201205071814
158: help()
159: 1
160: 2
161: 3
162: 4
163: 5
164: showbinds()
165: // Ended Normally: Thu May 10 14:32:54 EDT 2012
166: // New Session: Thu May 10 14:32:56 EDT 2012
167: // Running: 0.0, build 201205071814
168: help()
169: showbinds()
170: 1
171: 2
172: 3
173: 4
174: showbinds()
175: bind($x,5)
176: showbinds()
177: timing()
178: // Ended Normally: Thu May 10 14:48:02 EDT 2012
179: // New Session: Thu May 10 14:48:08 EDT 2012
180: // Running: 0.0, build 201205071814
181: help()
182: // Ended Normally: Thu May 10 14:48:39 EDT 2012
183: // New Session: Thu May 10 14:48:41 EDT 2012
184: // Running: 0.0, build 201205071814
185: help()
186: help(help:OPREF)
187: help(_help_op:OPREF)
188: // Ended Normally: Thu May 10 14:50:52 EDT 2012
189: // New Session: Thu May 10 14:50:53 EDT 2012
190: // Running: 0.0, build 201205071814
191: help()
192: declare(if)
193: // Ended Normally: Thu May 10 17:02:04 EDT 2012
194: // New Session: Thu May 10 17:02:07 EDT 2012
195: // Running: 0.0, build 201205071814
196: {rule if(true,$t,$f)-&gt;$t #rulesets IF}
197: {operator #name=if #params=($f:BOOLEAN, $t:$T, $f:$T) #type=$T}
198: {operator #name=if #params=%($f:BOOLEAN, $t:$T, $f:$T) #type=$T}
199: def({operator #name=if #params=%($f:BOOLEAN, $t:$T, $f:$T) #type=$T})
200: if(true,5,6)
201: def({operator #name=if #params=%($p:BOOLEAN, $t:$T, $f:$T) #type=$T})
202: if(true,5,6)
203: typeof(if(true,5,6))
204: typeof(if(true,5,&quot;&quot;))
205: // Ended Normally: Thu May 10 17:42:07 EDT 2012
206: // New Session: Thu May 10 17:42:10 EDT 2012
207: // Running: 0.0, build 201205071814
208: def({operator #name=if #params=%($p:BOOLEAN, $t:$T, $f:$T) #type=$T})
209: typeof(if(true,5,&quot;&quot;))
210: typeof(if(true,5,6))
211: typeof(if(true,&quot;Jim&quot;,&quot;&quot;))
212: {rule if(true,$t,$f)-&gt;$t #rulesets IF}
213: declare(IF)
214: {rule if(true,$t,$f)-&gt;$t #rulesets IF}
215: {rule if(false,$t,$f)-&gt;$f #rulesets IF}
216: if(true,5,6)
217: enable(IF)
218: if(true,5,6)
219: if(false,5,6)
220: equal(if(false,5,6),6)
221: equal(if(false,5,6),5)
222: 5.if(false,5,6)
223: 5-&gt;if(false,5,6)
224: settopdown()
225: topdown()
226: setdescend(true)
227: 5-&gt;if(false,5,6)
228: %A[$a].%C
229: %A[$a].%AC
230: %A[$a].%!AC
231: %A[$a].%A[$b]C
232: %A.%A[$b]C
233: if(true,5,6)
234: setlimit(0)
235: if(true,5,6)
236: // Ended Normally: Thu May 10 19:52:18 EDT 2012
237: // New Session: Thu May 10 19:52:21 EDT 2012
238: // Running: 0.0, build 201205071814
239: 1
240: fail()
241: // Ended Normally: Thu May 10 20:10:56 EDT 2012
242: // New Session: Thu May 10 20:11:00 EDT 2012
243: // Running: 0.0, build 201205071814
244: help()
245: // Ended Normally: Thu May 10 20:12:25 EDT 2012
246: // New Session: Thu May 10 20:12:27 EDT 2012
247: // Running: 0.0, build 201205071814
248: help()
249: // Ended Normally: Thu May 10 20:14:54 EDT 2012
250: // New Session: Thu May 10 20:14:57 EDT 2012
251: // Running: 0.0, build 201205071814
252: help()
253: help(tracematch:OPREF)
254: _help_all()
255: help()
256: // Ended Normally: Thu May 10 20:21:57 EDT 2012
257: // New Session: Thu May 10 20:22:21 EDT 2012
258: // Running: 0.0, build 201205071814
259: help()
260: // Ended Normally: Fri May 11 07:35:23 EDT 2012
261: // New Session: Tue May 15 20:41:51 EDT 2012
262: @ associative, not commutative
263: // Ended Normally: Tue May 15 20:43:22 EDT 2012
264: // New Session: Tue May 15 20:43:34 EDT 2012
265: // Ended Normally: Tue May 15 20:44:51 EDT 2012
266: // New Session: Tue May 15 20:44:59 EDT 2012
267: ## associative, not commutative, identity 5
268: ## associative
269: ##
270: ##ac
271: #
272:  ## ## ##
273:  #23
274: // Ended Normally: Tue May 15 20:47:01 EDT 2012
275: // New Session: Tue May 15 20:47:14 EDT 2012
276: |associative
277: ||
278: ||||||||||||
279: ############
280: | | | | | | ## ## 
281: // Ended Normally: Tue May 15 20:48:31 EDT 2012
282: // New Session: Tue May 15 20:48:36 EDT 2012
283: ~ associative
284: ~ ~ ~ ~ ~ ~
285: ## ## ##
286: // Ended Normally: Tue May 15 20:50:31 EDT 2012
287: // New Session: Tue May 15 20:50:46 EDT 2012
288: ## associative
289: ## associative, commutative
290: %AC
291: // Ended Normally: Tue May 15 20:52:45 EDT 2012
292: // New Session: Tue May 15 20:52:47 EDT 2012
293: &amp;associative
294: &amp;associative/
295: &amp;associative / 
296: &amp;associative / *
297: // Ended Normally: Tue May 15 20:53:47 EDT 2012
298: // New Session: Tue May 15 20:53:53 EDT 2012
299: &amp;[associative]
300: &amp;(associative)
301: &amp;(identity 5)
302: &amp;(identity 5, absorber 2)
303: &amp;(identity 5, absorber 2, associative)
304: &amp;(identity 5, absorber 2, idempotent)
305: &amp;(identity 5, absorber 2, idempotent, absorber 5)
306: traceparse()
307: showparse()
308: help()
309: // Ended Normally: Tue May 15 20:57:01 EDT 2012
310: // New Session: Tue May 15 20:58:25 EDT 2012
311: help()
312: // Ended Normally: Tue May 15 20:59:37 EDT 2012
313: // New Session: Tue May 15 20:59:39 EDT 2012
314: help()
315: _help_all()
316: add(5,4)
317: context()
318: // Ended Normally: Tue May 15 21:00:42 EDT 2012
319: // New Session: Tue May 15 21:00:47 EDT 2012
320: context()
321: // Ended Normally: Tue May 15 21:01:41 EDT 2012
322: // New Session: Tue May 15 21:01:43 EDT 2012
323: help(help:OPREF)
324: help()
325: _help_all()
326: traceparse()
327: showmatch()
328: tracematch()
329: 5
330: showprior()
331: 5
332: // Ended Normally: Tue May 15 22:01:58 EDT 2012
333: // New Session: Tue May 15 22:02:01 EDT 2012
334: help()
335: // Ended Normally: Tue May 15 22:03:19 EDT 2012
336: // New Session: Tue May 15 22:03:20 EDT 2012
337: showmatch()
338: tracematch()
339: help()
340: _help_all()
341: help(xx:OPREF)
342: tracematch()
343: _help_all()
344: // Ended Normally: Tue May 15 22:44:08 EDT 2012
345: // New Session: Tue May 15 22:44:18 EDT 2012
346: help()
347: help(help:OPREF)
348: // Ended Normally: Tue May 15 22:45:44 EDT 2012
349: // New Session: Tue May 15 22:46:36 EDT 2012
350: [[absorber 5]]
351: [[absorber 5, identity 0]]
352: [[absorber 5, identity 0, associative]]
353: // Ended Normally: Tue May 15 22:52:55 EDT 2012
354: // New Session: Tue May 15 22:53:06 EDT 2012
355: [[ag]]
356: [[ag,identity 4]]
357: [[ag ,identity 4]]
358: // Ended Normally: Tue May 15 22:54:05 EDT 2012
359: // New Session: Tue May 15 22:54:12 EDT 2012
360: [[associative, commutative]]
361: [[associative, commutative , identity 1]]
362: // Ended Normally: Tue May 15 22:55:30 EDT 2012
363: // New Session: Tue May 15 22:55:31 EDT 2012
364: [[ associative , commutative , identity 1 ]]
365: [[associative,commutative,identity 1]]
366: // Ended Normally: Tue May 15 22:56:33 EDT 2012
367: // New Session: Tue May 15 22:56:36 EDT 2012
368: [[associative, commutative, not idempotent, identity 0]]
369: // Ended Normally: Tue May 15 22:57:11 EDT 2012
370: // New Session: Tue May 15 22:57:13 EDT 2012
371: [[associative, commutative, not idempotent, identity 0]]
372: // Ended Normally: Tue May 15 22:58:08 EDT 2012
373: // New Session: Tue May 15 22:58:12 EDT 2012
374: ##associative, commutative, not idempotent, identity 0
375: ##associative, commutative, not idempotent, identity 0 (5,6,7)
376: // Ended Normally: Tue May 15 23:48:59 EDT 2012
377: // New Session: Tue May 15 23:49:24 EDT 2012
378: %AC!ID[0]
379: %associative, commutative, not idempotent, identity 0
380: % associative, commutative, not idempotent, identity 0
381: % AC!ID[0]
382: // Ended Normally: Wed May 16 00:26:33 EDT 2012
383: // New Session: Wed May 16 00:26:35 EDT 2012
384: {! foo($x:INTEGER,$y):INTEGER}
385: {! foo($x:INTEGER,$y)}
386: // Ended Normally: Wed May 16 00:29:38 EDT 2012
387: // New Session: Wed May 16 00:29:54 EDT 2012
388: {! foo($x:INTEGER,$y)}
389: {! foo($x:INTEGER,$y) #type=INTEGER}
390: {! foo($x:INTEGER,$y):INTEGER}
391: {! foo($x:INTEGER,$y):INTEGER #detail=&quot;Do that foo that you do.&quot;}
392: // Ended Normally: Wed May 16 00:30:48 EDT 2012
393: // New Session: Wed May 16 00:40:20 EDT 2012
394: {! foo($x:INTEGER,$y):INTEGER}
395: {! foo($x:INTEGER,$y):INTEGER is %ACID[0]}
396: {! foo($x:INTEGER,$y:INTEGER):INTEGER is %ACID[0]}
397: {! foo($x:INTEGER,$y:INTEGER):INTEGER is %associative, commutative}
398: {! foo($x:INTEGER,$y:INTEGER):INTEGER is associative, commutative}
399: // Ended Normally: Wed May 16 00:45:53 EDT 2012
400: // New Session: Wed May 16 00:45:57 EDT 2012
401: %associative.%commutative
402: %associative.% not associative, commutative
403: %associative, identity 0 . %commutative, identity 2
404: (%associative, identity 0).%commutative, identity 2
405: (%associative.%idempotent).%(3,%associative,idempotent(3),3)
406: %associative.%idempotent(3,%idempotent(3),3)
407: %associative.%idempotent(3,%idempotent, associative(3),3)
408: def({operator #name=sum #cases
409:           %($x: INTEGER) -&gt; $x,
410:           %($x: STRING) -&gt; $x,
411:           %AC($x: INTEGER, $y: INTEGER) -&gt; add($x,$y),
412:           %A($x: STRING, $y: STRING) -&gt; ($x.$y),
413:           _ -&gt; _
414: #description=&quot;Compute the generic polymorphic sum.&quot;
415: #details=&quot;This operator computes the polymorphic sum of its arguments.&quot;
416: })
417: // Ended Normally: Wed May 16 01:04:51 EDT 2012
418: // New Session: Wed May 16 01:05:03 EDT 2012
419: def({operator #name=sum #cases
420:           %($x: INTEGER) -&gt; $x,
421:           %($x: STRING) -&gt; $x,
422:           %AC($x: INTEGER, $y: INTEGER) -&gt; add($x,$y),
423:           %A($x: STRING, $y: STRING) -&gt; ($x.$y),
424:           _ -&gt; _
425: #description=&quot;Compute the generic polymorphic sum.&quot;
426: #details=&quot;This operator computes the polymorphic sum of its arguments.&quot;
427: }
428: (
429: x
430: y
431: // Ended Normally: Wed May 16 01:06:07 EDT 2012
432: // New Session: Wed May 16 01:06:09 EDT 2012
433: def({operator #name=sum #cases
434:           %($x: INTEGER) -&gt; $x,
435:           %($x: STRING) -&gt; $x,
436:           %AC($x: INTEGER, $y: INTEGER) -&gt; add($x,$y),
437:           %A($x: STRING, $y: STRING) -&gt; ($x.$y),
438:           _ -&gt; _
439: #description=&quot;Compute the generic polymorphic sum.&quot;
440: #details=&quot;This operator computes the polymorphic sum of its arguments.&quot;
441: })
442: def ({operator #name=sum #cases
443:           %($x: INTEGER) -&gt; $x,
444:           %($x: STRING) -&gt; $x,
445:           %AC($x: INTEGER, $y: INTEGER) -&gt; add($x,$y),
446:           %A($x: STRING, $y: STRING) -&gt; ($x.$y),
447:           _ -&gt; _
448: #description=&quot;Compute the generic polymorphic sum.&quot;
449: #detail=&quot;This operator computes the polymorphic sum of its arguments.&quot;
450: })
451: help(sum:OPREF)
452: {!foo($x,$y)}
453: // Ended Normally: Wed May 16 01:23:01 EDT 2012
454: // New Session: Wed May 16 21:31:53 EDT 2012
455: &quot;
456: &quot;&quot;
457: &quot;&quot;&quot;
458: &quot;&quot;&quot;&quot;
459: &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
460: // Ended Normally: Thu May 17 16:47:13 EDT 2012
461: // New Session: Thu May 24 03:14:03 EDT 2012
462: // Ended Normally: Thu May 24 03:14:33 EDT 2012
463: // New Session: Thu May 24 03:14:34 EDT 2012
464: {! foo() #handler=&quot;println(5)&quot;}
465: // Ended Normally: Thu May 24 03:16:44 EDT 2012
466: // New Session: Thu May 24 03:16:45 EDT 2012
467: {! foo() #handler=&quot;println(5)&quot;}
468: // Ended Normally: Thu May 24 03:17:52 EDT 2012
469: // New Session: Thu May 24 03:17:53 EDT 2012
470: {! foo() #handler=&quot;println(5)&quot;}
471: // Ended Normally: Thu May 24 03:18:17 EDT 2012
472: // New Session: Thu May 24 03:18:18 EDT 2012
473: {! foo() #handler=&quot;println(5)&quot;}
474: // Ended Normally: Thu May 24 03:18:53 EDT 2012
475: // New Session: Thu May 24 03:18:54 EDT 2012
476: {! foo() #handler=&quot;println(5)&quot;}
477: // Ended Normally: Thu May 24 03:19:27 EDT 2012
478: // New Session: Thu May 24 03:19:28 EDT 2012
479: {! foo() #handler=&quot;println(5)&quot;}
480: // Ended Normally: Thu May 24 03:19:47 EDT 2012
481: // New Session: Thu May 24 03:20:29 EDT 2012
482: {! foo() #handler=&quot;println(5)&quot;}
483: // Ended Normally: Thu May 24 03:21:29 EDT 2012
484: // New Session: Thu May 24 03:21:32 EDT 2012
485: // Ended Normally: Thu May 24 03:22:02 EDT 2012
486: // New Session: Thu May 24 03:22:04 EDT 2012
487: // Ended Normally: Thu May 24 03:23:30 EDT 2012
488: // New Session: Thu May 24 03:23:33 EDT 2012
489: {! foo() #handler=&quot;println(5)&quot;}
490: // Ended Normally: Thu May 24 03:23:47 EDT 2012
491: // New Session: Thu May 24 03:23:48 EDT 2012
492: {! foo() #handler=&quot;println(5)&quot;}
493: // Ended Normally: Thu May 24 03:23:54 EDT 2012
494: // New Session: Thu May 24 03:24:32 EDT 2012
495: // Ended Normally: Thu May 24 03:24:34 EDT 2012
496: // New Session: Thu May 24 03:24:43 EDT 2012
497: // Ended Normally: Thu May 24 03:24:45 EDT 2012
498: // New Session: Thu May 24 03:24:53 EDT 2012
499: // Ended Normally: Thu May 24 03:24:54 EDT 2012
500: // New Session: Thu May 24 03:25:02 EDT 2012
501: // Ended Normally: Thu May 24 03:25:04 EDT 2012
502: // New Session: Thu May 24 03:25:12 EDT 2012
</history>
      		</elision-core>