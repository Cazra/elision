/* Copyright (c) 2012 by Stacy Prowell (sprowell@gmail.com).
 * All rights reserved.  http://stacyprowell.com
 *       _ _     _
 *   ___| (_)___(_) ___  _ __
 *  / _ \ | / __| |/ _ \| '_ \
 * |  __/ | \__ \ | (_) | | | |
 *  \___|_|_|___/_|\___/|_| |_|
 */
package sjp.elision.core

/**
 * Handle iterating over a collection of matches.
 * 
 * This is provided to help in the case that a subordinate match (say of a child
 * atom) returns many matches.  When this happens, you can create an instance
 * of this class and provide two things:
 *  - A closure for `localMatch`.  This is the "thing to do" with each
 *    subordinate match to generate a complete overall match.  That is, given
 *    a single match for a child, we do this to create a complete match.  Any
 *    outcome is possible: no match, a single match, or many matches.  These
 *    cases are correctly handled by this iterator.
 *  - The subordinate match iterator `subiter` that provides the subordinate
 *    matches.
 * 
 * @param localMatch	Additional work to complete a match, given a subordinate
 * 										match.  This takes the binding from the subordinate match
 * 										and yields a new match outcome.
 * @param	subiter			The subordinate iterator.
 */
class MatchIterator(val localMatch: (Bindings) => Outcome,
  val subiter: MatchIterator) extends Iterator[Bindings] {
  /** A local iterator generated by the localMatch, if any. */
  private var localiter: MatchIterator = null

  /** Has the iterator been exhausted. */
  private var exhausted = false

  /**
   * If a match has been generated, it is held here until it can be returned
   * via next.  We allow this field to be null for performance reasons.
   */
  private var current: Bindings = null

  /**
   * Determine if there is a next match.
   *
   * Note that since we have to know if there is a match, matching is actually
   * performed here, if necessary.
   *
   * @return	True if there is another match, and false if not.
   */
  def hasNext =
    if (exhausted) false
    else if (current != null) true else {
      current = getNextMatch
      if (current == null) exhausted = true
      current != null
    }

  /**
   * Get the next match.
   *
   * This can be called without first calling hasNext, but it will not throw an
   * exception as is typically done in Java (and in Iterators).  Instead if
   * there is no next match, it will return null.
   *
   * @return	The next match, or null if there is none.
   */
  def next =
    if (current != null || hasNext) {
      val ret = current
      current = null
      ret
    } else null

  /**
   * The method to generate the next match.  This must be supplied by any
   * overriding class.  This method should return null to signal that no more
   * matches are possible.
   *
   * @return	The next match.
   */
  protected def getNextMatch: Bindings = {
    // This method is very un-scala and highly imperative, but that seems the
    // simplest, most understandable approach.

    // Keep going until we have exhausted the local iterator.
    if (localiter != null)
      if (localiter.hasNext) return localiter.next
      else { localiter = null }

    // Now handle the child iterator.
    if (subiter.hasNext) {
      // Obtain the next subordinate match.  We get a collection of bindings.
      // Then apply the local matching process and handle the result.
      localMatch(subiter.next) match {
        case Fail(_) => return getNextMatch
        case Match(binds) => return binds
        case Many(matches) => {
          // Now we have a local iterator.  Save it and start using it now.
          localiter = matches
          return getNextMatch
        }
      }
    } else return null
  }
}
